document.addEventListener("DOMContentLoaded", () => {
  const baseUrl =
    document.querySelector('meta[name="base-url"]')?.content ||
    window.location.origin;

  const inputBuscar = document.getElementById("inputBuscarUsuario");
  const listaSugerencias = document.getElementById("listaSugerencias");
  const contenedor = document.getElementById("formularioDetalles");

  let timer;

  // üß† Detectar escritura con retardo
  inputBuscar.addEventListener("input", () => {
    clearTimeout(timer);
    const query = inputBuscar.value.trim();

    if (query.length < 2) {
      listaSugerencias.innerHTML = "";
      return;
    }

    timer = setTimeout(() => buscarUsuarios(query), 300);
  });

  /**
   * üîç Busca usuarios seg√∫n el texto ingresado
   */
  async function buscarUsuarios(q) {
    try {
      const { data } = await axios.get(`${baseUrl}/usuarios-detalles/buscar`, {
        params: { q },
      });

      const results = data.results || [];

      if (!results.length) {
        listaSugerencias.innerHTML = `<li><small>Sin resultados</small></li>`;
        return;
      }

      listaSugerencias.innerHTML = results
        .map(
          (u) => `
      <li data-id="${u.id}" data-rol="${u.rol}">
        ${u.nombre} <small>‚Äì ${u.rol}</small>
      </li>`
        )
        .join("");

      document
        .querySelectorAll("#listaSugerencias li[data-id]")
        .forEach((li) => {
          li.addEventListener("click", async () => {
            const id = li.dataset.id;
            inputBuscar.value = li.textContent.trim();
            listaSugerencias.innerHTML = "";
            await cargarFormulario(id);
          });
        });
    } catch {
      listaSugerencias.innerHTML = `<li><small>Error al buscar usuarios</small></li>`;
    }
  }

  /**
   * üìã Cargar formulario del usuario seleccionado
   */
  async function cargarFormulario(id) {
    contenedor.innerHTML = `<p>Cargando informaci√≥n...</p>`;
    try {
      const url = `${baseUrl}/admin/usuarios-detalles/ver/${id}`;
      const { data } = await axios.get(url);

      const u = data.usuario;
      const d = data.detalles || {};

      if (!u) throw new Error("No se encontr√≥ el usuario en la respuesta");

      contenedor.innerHTML = generarFormulario(u, d);
      registrarEventoFormulario(baseUrl);
      cargarPaisesYEstados(d.pais_origen || "", d.estado || "");

      // üîí Ocultar formaci√≥n acad√©mica si el rol no es Profesor
      const rol = u.rol?.toLowerCase();
      if (rol !== "profesor" && rol !== "superusuario" && rol !== "escolares") {
        const formacion = document.querySelector(".form-section.formacion");
        if (formacion) formacion.remove();
      }
    } catch (error) {
      console.error("üö® Error al cargar los datos:", error.response || error);
      contenedor.innerHTML = `<p style="color:red;">Error al cargar los datos del usuario.</p>`;
    }
  }

  // üßπ Cerrar lista de sugerencias al hacer clic fuera
  document.addEventListener("click", (e) => {
    if (!e.target.closest(".form-group")) listaSugerencias.innerHTML = "";
  });

  // UX: seleccionar texto al enfocar
  inputBuscar.addEventListener("focus", () => inputBuscar.select());
});

/**
 * üß± Generar formulario
 */
function generarFormulario(u, d) {
  return `
  <form id="formDetalles">
    <input type="hidden" name="usuario_id" value="${u.id}">

    <!-- üßç Datos personales -->
    <section class="form-section">
      <h3>Datos personales</h3>
      <div class="form-grid">
        <div class="form-group">
          <label>Sexo:</label>
          <select name="sexo">
            <option value="">Seleccione</option>
            <option value="Masculino" ${
              d.sexo === "Masculino" ? "selected" : ""
            }>Masculino</option>
            <option value="Femenino" ${
              d.sexo === "Femenino" ? "selected" : ""
            }>Femenino</option>
          </select>
        </div>

        <div class="form-group">
          <label>Fecha de nacimiento:</label>
          <input type="date" name="fecha_nacimiento" value="${
            d.fecha_nacimiento || ""
          }">
        </div>

        <div class="form-group">
          <label>Estado civil:</label>
          <select name="estado_civil">
            <option value="">Seleccione</option>
            ${[
              "Soltero(a)",
              "Casado(a)",
              "Uni√≥n libre",
              "Divorciado(a)",
              "Viudo(a)",
            ]
              .map(
                (ec) =>
                  `<option value="${ec}" ${
                    d.estado_civil === ec ? "selected" : ""
                  }>${ec}</option>`
              )
              .join("")}
          </select>
        </div>

        <div class="form-group">
          <label>CURP:</label>
          <input type="text" name="curp" maxlength="18" value="${d.curp || ""}">
        </div>

        <div class="form-group">
          <label>RFC:</label>
          <input type="text" name="rfc" maxlength="13" value="${d.rfc || ""}">
        </div>

        <div class="form-group">
          <label>Pa√≠s de origen:</label>
          <select name="pais_origen" id="selectPais"></select>
        </div>
      </div>
    </section>

    <!-- ‚ù§Ô∏è Datos m√©dicos -->
    <section class="form-section">
      <h3>Datos m√©dicos</h3>
      <div class="form-grid">
        <div class="form-group"><label>Peso (kg):</label><input type="number" step="0.01" name="peso" value="${
          d.peso || ""
        }"></div>
        <div class="form-group"><label>Estatura (m):</label><input type="number" step="0.01" name="estatura" value="${
          d.estatura || ""
        }"></div>
        <div class="form-group">
  <label>Tipo de sangre:</label>
  <select name="tipo_sangre">
    <option value="">Seleccione</option>
    ${["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"]
      .map(
        (tipo) =>
          `<option value="${tipo}" ${
            d.tipo_sangre === tipo ? "selected" : ""
          }>${tipo}</option>`
      )
      .join("")}
  </select>
</div>

      </div>

      <div class="checkbox-group">
  <label>
    <input type="checkbox" name="antecedente_diabetico" ${
      d.antecedente_diabetico == 1 ? "checked" : ""
    }> Familiar diab√©tico
  </label>
  <label>
    <input type="checkbox" name="antecedente_hipertenso" ${
      d.antecedente_hipertenso == 1 ? "checked" : ""
    }> Familiar hipertenso
  </label>
  <label>
    <input type="checkbox" name="antecedente_cardiaco" ${
      d.antecedente_cardiaco == 1 ? "checked" : ""
    }> Familiar cardiaco
  </label>
</div>

    </section>

    <!-- üè† Domicilio -->
    <section class="form-section">
      <h3>Domicilio</h3>
      <div class="form-grid">
        <div class="form-group"><label>Estado:</label><select name="estado" id="selectEstado"></select></div>
        <div class="form-group"><label>Municipio:</label><input type="text" name="municipio" value="${
          d.municipio || ""
        }"></div>
        <div class="form-group"><label>Colonia:</label><input type="text" name="colonia" value="${
          d.colonia || ""
        }"></div>
        <div class="form-group"><label>Calle:</label><input type="text" name="calle" value="${
          d.calle || ""
        }"></div>
        <div class="form-group"><label>N√∫mero exterior:</label><input type="text" name="numero_exterior" value="${
          d.numero_exterior || ""
        }"></div>
        <div class="form-group"><label>N√∫mero interior:</label><input type="text" name="numero_interior" value="${
          d.numero_interior || ""
        }"></div>
      </div>
    </section>

    <!-- ‚òéÔ∏è Comunicaci√≥n -->
    <section class="form-section">
      <h3>Comunicaci√≥n</h3>
      <div class="form-grid">
        <div class="form-group"><label>Tel√©fono:</label><input type="text" name="telefono" value="${
          d.telefono || ""
        }"></div>
        <div class="form-group"><label>Correo alternativo:</label><input type="email" name="correo_alternativo" value="${
          d.correo_alternativo || ""
        }"></div>
        <div class="form-group"><label>Tel√©fono de trabajo:</label><input type="text" name="telefono_trabajo" value="${
          d.telefono_trabajo || ""
        }"></div>
      </div>
    </section>

    <!-- üéì Formaci√≥n acad√©mica -->
    <section class="form-section formacion">
      <h3>Formaci√≥n acad√©mica</h3>
      <div class="form-grid">
        <div class="form-group">
  <label>Grado acad√©mico:</label>
  <select name="grado_academico">
    <option value="">Seleccione</option>
    ${[
      "T√©cnico Superior",
      "Licenciatura",
      "Ingenier√≠a",
      "Maestr√≠a",
      "Doctorado",
      "Posdoctorado",
    ]
      .map(
        (grado) =>
          `<option value="${grado}" ${
            d.grado_academico === grado ? "selected" : ""
          }>${grado}</option>`
      )
      .join("")}
  </select>
</div>

        <div class="form-group"><label>Descripci√≥n del grado:</label><input type="text" name="descripcion_grado" value="${
          d.descripcion_grado || ""
        }"></div>
        <div class="form-group"><label>C√©dula profesional:</label><input type="text" name="cedula_profesional" value="${
          d.cedula_profesional || ""
        }"></div>
      </div>
    </section>

    <button type="submit" class="btn-nuevo">Guardar cambios</button>
  </form>`;
}

/**
 * üíæ Guardar cambios del formulario
 */
function registrarEventoFormulario(baseUrl) {
  const form = document.getElementById("formDetalles");
  const inputBuscar = document.getElementById("inputBuscarUsuario");
  const contenedor = document.getElementById("formularioDetalles");

  if (!form) return;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);

    try {
      const res = await axios.post(
        `${baseUrl}/admin/usuarios-detalles/guardar`,
        formData
      );

      await Swal.fire({
        title: "‚úÖ √âxito",
        text: res.data.message || "Los datos se guardaron correctamente.",
        icon: "success",
        confirmButtonText: "Aceptar",
      });

      // üîÑ Reiniciar vista
      inputBuscar.value = "";
      contenedor.innerHTML = "";
      inputBuscar.focus();
    } catch (err) {
      console.error("‚ùå Error al guardar:", err);
      Swal.fire("Error", "No se pudo guardar la informaci√≥n.", "error");
    }
  });
}

/**
 * üåç Cargar pa√≠ses (lista completa) y estados
 */
function cargarPaisesYEstados(paisSeleccionado = "", estadoSeleccionado = "") {
  const paisSelect = document.getElementById("selectPais");
  const estadoSelect = document.getElementById("selectEstado");

  if (!paisSelect || !estadoSelect) return;

  // üåé Lista completa de pa√≠ses (195)
  const paises = [
    "Afganist√°n",
    "Albania",
    "Alemania",
    "Andorra",
    "Angola",
    "Antigua y Barbuda",
    "Arabia Saudita",
    "Argelia",
    "Argentina",
    "Armenia",
    "Australia",
    "Austria",
    "Azerbaiy√°n",
    "Bahamas",
    "Banglad√©s",
    "Barbados",
    "Bar√©in",
    "B√©lgica",
    "Belice",
    "Ben√≠n",
    "Bielorrusia",
    "Birmania",
    "Bolivia",
    "Bosnia y Herzegovina",
    "Botsuana",
    "Brasil",
    "Brun√©i",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "But√°n",
    "Cabo Verde",
    "Camboya",
    "Camer√∫n",
    "Canad√°",
    "Catar",
    "Chad",
    "Chile",
    "China",
    "Chipre",
    "Colombia",
    "Comoras",
    "Corea del Norte",
    "Corea del Sur",
    "Costa Rica",
    "Costa de Marfil",
    "Croacia",
    "Cuba",
    "Dinamarca",
    "Dominica",
    "Ecuador",
    "Egipto",
    "El Salvador",
    "Emiratos √Årabes Unidos",
    "Eritrea",
    "Eslovaquia",
    "Eslovenia",
    "Espa√±a",
    "Estados Unidos",
    "Estonia",
    "Etiop√≠a",
    "Filipinas",
    "Finlandia",
    "Fiyi",
    "Francia",
    "Gab√≥n",
    "Gambia",
    "Georgia",
    "Ghana",
    "Granada",
    "Grecia",
    "Guatemala",
    "Guinea",
    "Guinea-Bis√°u",
    "Guinea Ecuatorial",
    "Guyana",
    "Hait√≠",
    "Honduras",
    "Hungr√≠a",
    "India",
    "Indonesia",
    "Irak",
    "Ir√°n",
    "Irlanda",
    "Islandia",
    "Islas Marshall",
    "Islas Salom√≥n",
    "Israel",
    "Italia",
    "Jamaica",
    "Jap√≥n",
    "Jordania",
    "Kazajist√°n",
    "Kenia",
    "Kirguist√°n",
    "Kiribati",
    "Kuwait",
    "Laos",
    "Lesoto",
    "Letonia",
    "L√≠bano",
    "Liberia",
    "Libia",
    "Liechtenstein",
    "Lituania",
    "Luxemburgo",
    "Madagascar",
    "Malasia",
    "Malaui",
    "Maldivas",
    "Mal√≠",
    "Malta",
    "Marruecos",
    "Mauricio",
    "Mauritania",
    "M√©xico",
    "Micronesia",
    "Moldavia",
    "M√≥naco",
    "Mongolia",
    "Montenegro",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Nicaragua",
    "N√≠ger",
    "Nigeria",
    "Noruega",
    "Nueva Zelanda",
    "Om√°n",
    "Pa√≠ses Bajos",
    "Pakist√°n",
    "Palaos",
    "Palestina",
    "Panam√°",
    "Pap√∫a Nueva Guinea",
    "Paraguay",
    "Per√∫",
    "Polonia",
    "Portugal",
    "Reino Unido",
    "Rep√∫blica Centroafricana",
    "Rep√∫blica Checa",
    "Rep√∫blica del Congo",
    "Rep√∫blica Democr√°tica del Congo",
    "Rep√∫blica Dominicana",
    "Ruanda",
    "Rumania",
    "Rusia",
    "Samoa",
    "San Crist√≥bal y Nieves",
    "San Marino",
    "San Vicente y las Granadinas",
    "Santa Luc√≠a",
    "Santo Tom√© y Pr√≠ncipe",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leona",
    "Singapur",
    "Siria",
    "Somalia",
    "Sri Lanka",
    "Sud√°frica",
    "Sud√°n",
    "Sud√°n del Sur",
    "Suecia",
    "Suiza",
    "Surinam",
    "Tailandia",
    "Tanzania",
    "Tayikist√°n",
    "Timor Oriental",
    "Togo",
    "Tonga",
    "Trinidad y Tobago",
    "T√∫nez",
    "Turkmenist√°n",
    "Turqu√≠a",
    "Tuvalu",
    "Ucrania",
    "Uganda",
    "Uruguay",
    "Uzbekist√°n",
    "Vanuatu",
    "Vaticano",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Yibuti",
    "Zambia",
    "Zimbabue",
  ];

  const datos = {
    M√©xico: [
      "Aguascalientes",
      "Baja California",
      "Baja California Sur",
      "Campeche",
      "Chiapas",
      "Chihuahua",
      "Ciudad de M√©xico",
      "Coahuila",
      "Colima",
      "Durango",
      "Estado de M√©xico",
      "Guanajuato",
      "Guerrero",
      "Hidalgo",
      "Jalisco",
      "Michoac√°n",
      "Morelos",
      "Nayarit",
      "Nuevo Le√≥n",
      "Oaxaca",
      "Puebla",
      "Quer√©taro",
      "Quintana Roo",
      "San Luis Potos√≠",
      "Sinaloa",
      "Sonora",
      "Tabasco",
      "Tamaulipas",
      "Tlaxcala",
      "Veracruz",
      "Yucat√°n",
      "Zacatecas",
    ],
  };

  paisSelect.innerHTML = '<option value="">Seleccione un pa√≠s</option>';
  estadoSelect.innerHTML = '<option value="">Seleccione un estado</option>';

  paises.forEach((pais) => {
    const opt = document.createElement("option");
    opt.value = pais;
    opt.textContent = pais;
    if (pais === paisSeleccionado) opt.selected = true;
    paisSelect.appendChild(opt);
  });

  if (paisSeleccionado && datos[paisSeleccionado]) {
    datos[paisSeleccionado].forEach((estado) => {
      const opt = document.createElement("option");
      opt.value = estado;
      opt.textContent = estado;
      if (estado === estadoSeleccionado) opt.selected = true;
      estadoSelect.appendChild(opt);
    });
  }

  paisSelect.addEventListener("change", () => {
    const pais = paisSelect.value;
    estadoSelect.innerHTML = '<option value="">Seleccione un estado</option>';
    if (datos[pais]) {
      datos[pais].forEach((estado) => {
        const opt = document.createElement("option");
        opt.value = estado;
        opt.textContent = estado;
        estadoSelect.appendChild(opt);
      });
    }
  });
}
